{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lets be honest, any Feature Flag or Feature Toggle platform is just a glorified Key-Value store, and all Vexil does is map string-based keys into a strongly-typed hierarchy and provide a (hopefully) nice developer experience."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s very important then when working with different "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValueSource"},{"type":"text","text":"s that you know how Vexil maps the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagContainer"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagGroup"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Flag"},{"type":"text","text":"s into something that can work with any key-value store."}]},{"anchor":"FlagPole-Configuration","level":2,"type":"heading","text":"FlagPole Configuration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You choose your encoding strategy and group separator when you initialise your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagPole"},{"type":"text","text":" by passing in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/VexilConfiguration"},{"type":"text","text":" instance:"}]},{"type":"codeListing","syntax":"swift","code":["let config = VexilConfiguration(codingPathStrategy: .snakecase, separator: \"\/\")","let flagPole = FlagPole(hoist: MyFlags.self, configuration: config)"]},{"anchor":"Key-encoding-strategy","level":3,"type":"heading","text":"Key encoding strategy"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Vexil supports a number of different strategies to encoding keys. The default approach is the "},{"type":"codeVoice","code":"kebabcase"},{"type":"text","text":" encoding with period ("},{"type":"codeVoice","code":"."},{"type":"text","text":") separators."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can find the key of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Flag"},{"type":"text","text":" at any time using its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Flag\/key"},{"type":"text","text":" property."}]},{"anchor":"Kebab-case-encoding","level":4,"type":"heading","text":"Kebab-case encoding"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default, the kebab-case encoding joins words in property names with dashes:"}]},{"type":"codeListing","syntax":"swift","code":["print(flagPole.subgroup.secondSubgroup.$myAwesomeFlag.key)","","\/\/ outputs: \"subgroup.second-subgroup.my-awesome-flag\""]},{"anchor":"Snake-case-encoding","level":4,"type":"heading","text":"Snake-case encoding"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, the snake-case encoding joins words in property names with underscores:"}]},{"type":"codeListing","syntax":"swift","code":["print(flagPole.subgroup.secondSubgroup.$myAwesomeFlag.key)","","\/\/ outputs: \"subgroup.second_subgroup.my_awesome_flag\""]},{"anchor":"Group-separator","level":3,"type":"heading","text":"Group separator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default Vexil will join each level of the flag tree together with periods ("},{"type":"codeVoice","code":"."},{"type":"text","text":"), but you can easily change that to anything else, like say slashes ("},{"type":"codeVoice","code":"\/"},{"type":"text","text":"), so the kebab-case example above would become:"}]},{"type":"codeListing","syntax":"swift","code":["print(flagPole.subgroup.secondSubgroup.$myAwesomeFlag.key)","","\/\/ outputs: \"subgroup\/second-subgroup\/my-awesome-flag\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Which starts to look a lot like a file path."}]},{"anchor":"Prefixes","level":3,"type":"heading","text":"Prefixes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Vexil also supports an optional prefix for calculating its flag keys. So if you wanted to ensure that all feature flags in your "},{"type":"codeVoice","code":"UserDefaults"},{"type":"text","text":" started with a "},{"type":"codeVoice","code":"feature."},{"type":"text","text":" for example, you could set the prefix to "},{"type":"codeVoice","code":"\"feature\""},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["let config = VexilConfiguration(prefix: \"feature\")","let flagPole = FlagPole(hoist: MyFlags.self, configuration: config)","","print(flagPole.subgroup.secondSubgroup.$myAwesomeFlag.key)","","\/\/ outputs: \"feature.subgroup.second-subgroup.my-awesome-flag\""]},{"anchor":"Flag-Key-Overrides","level":2,"type":"heading","text":"Flag Key Overrides"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes though you want to override how a specific flag calculates its key. Vexil allows you to pass in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Flag\/CodingKeyStrategy"},{"type":"text","text":" when you declare your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Flag"},{"type":"text","text":" to alter how its key is calculated:"}]},{"type":"codeListing","syntax":"swift","code":["@Flag(codingKeyStrategy: .snakecase, default: false, description: \"My Awesome Flag\")","var myAwesomeFlag: Bool","","\/\/ Key is \"subgroup.second-subgroup.my_awesome_flag\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That would leave "},{"type":"codeVoice","code":"myAwesomeFlag"},{"type":"text","text":" calculating its key as "},{"type":"codeVoice","code":"\"subgroup.second-subgroup.my_awesome_flag\""},{"type":"text","text":" while leaving the default behaviour of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagPole"},{"type":"text","text":" unchanged."}]},{"anchor":"Custom-Key","level":3,"type":"heading","text":"Custom Key"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also go for a manually specified key instead of a calculated one using a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Flag\/CodingKeyStrategy"},{"type":"text","text":" of "},{"type":"codeVoice","code":".customKey(\"my-key\")"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["@Flag(codingKeyStrategy: .customKey(\"my-key\"), default: false, description: \"My Awesome Flag\")","var myAwesomeFlag: Bool","","\/\/ Key is \"subgroup.second-subgroup.my-key\""]},{"anchor":"Custom-Key-Path","level":3,"type":"heading","text":"Custom Key Path"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But sometimes your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValueSource"},{"type":"text","text":" doesn’t play nice, or the people naming flags in the backend don’t provide the same structure that you want your local flags to be in. You can instead set a manual key path. In this case the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagPole"},{"type":"text","text":" will ignore the location of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Flag"},{"type":"text","text":" in the flag structure and will just use the key you specify."}]},{"type":"codeListing","syntax":"swift","code":["@Flag(codingKeyStrategy: .customKeyPath(\"my-key\"), default: false, description: \"My Awesome Flag\")","var myAwesomeFlag: Bool","","\/\/ Key is \"my-key\""]},{"anchor":"FlagGroup-Overrides","level":2,"type":"heading","text":"FlagGroup Overrides"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagGroup"},{"type":"text","text":" doesn’t have an explicit key of its own, it does form part of the calculated key. For example, if we declared our "},{"type":"codeVoice","code":"MyFlags"},{"type":"text","text":" structure as:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyFlags: FlagContainer {","    ","    @FlagGroup(description: \"A subgroup of flags\")","    var subgroup: Subgroup","    ","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then "},{"type":"codeVoice","code":"\"subgroup\""},{"type":"text","text":" would form the first part of the key as calculated in the examples above."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Flag"},{"type":"text","text":"s, we can customise the calculation of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagGroup"},{"type":"text","text":"s key by passing in a custom "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagGroup\/CodingKeyStrategy"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagGroup\/CodingKeyStrategy"},{"type":"text","text":" supports most of the same basic options as the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Flag"},{"type":"text","text":" above (eg, "},{"type":"codeVoice","code":".kebabcase"},{"type":"text","text":", "},{"type":"codeVoice","code":".snakecase"},{"type":"text","text":", and "},{"type":"codeVoice","code":".customKey(String)"},{"type":"text","text":"), but it does not support a "},{"type":"codeVoice","code":".customKeyPath(String)"},{"type":"text","text":", because it does not have its own key calculated."}]},{"anchor":"Skipping-FlagGroups","level":3,"type":"heading","text":"Skipping FlagGroups"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It does support an additional "},{"type":"codeVoice","code":"CodingKeyStrategy"},{"type":"text","text":" though: "},{"type":"codeVoice","code":".skip"},{"type":"text","text":". Which will ignore that "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagGroup"},{"type":"text","text":"s key in the calculation:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyFlags: FlagContainer {","    ","    @FlagGroup(codingKeyStrategy: .skip, description: \"A second-level subgroup of flags\")","    var secondSubgroup: SecondSubgroup","    ","}","","let flagPole = FlagPole(hoist: MyFlags.self)","print(flagPole.subgroup.secondSubgroup.$myAwesomeFlag.key)","","\/\/ Outputs \"subgroup.my-awesome-flag\"","\/\/ (the \"second-subgroup\" component is omitted)"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/vexil\/flagkeys"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Vexil\/documentation\/Vexil\/FlagKeys","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An in depth at how Vexil calculates the key for each of its flags, and how you can control that process."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Flag Keys","role":"article","modules":[{"name":"Vexil"}]},"hierarchy":{"paths":[["doc:\/\/Vexil\/documentation\/Vexil"]]},"seeAlsoSections":[{"title":"The Flag Pole","identifiers":["doc:\/\/Vexil\/documentation\/Vexil\/FlagPole","doc:\/\/Vexil\/documentation\/Vexil\/VexilConfiguration","doc:\/\/Vexil\/documentation\/Vexil\/Sources","doc:\/\/Vexil\/documentation\/Vexil\/FlagPublishing"],"generated":true}],"references":{"doc://Vexil/documentation/Vexil/Flag/CodingKeyStrategy":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"FlagValue"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"Flag.CodingKeyStrategy","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeyStrategy"}],"abstract":[{"type":"text","text":"An enumeration describing how the key should be calculated for this specific "},{"type":"codeVoice","code":"Flag"},{"type":"text","text":"."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Flag\/CodingKeyStrategy","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CodingKeyStrategy"}],"url":"\/documentation\/vexil\/flag\/codingkeystrategy"},"doc://Vexil/documentation/Vexil/Sources":{"role":"article","title":"Flag Hierarchy","abstract":[{"type":"text","text":"The Vexil FlagPole supports multiple backend flag sources. This guide walks through the built-in sources, how a FlagPole determines the source hierarchy and how to manipulate it."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Sources","kind":"article","type":"topic","url":"\/documentation\/vexil\/sources"},"doc://Vexil/documentation/Vexil/FlagContainer":{"role":"symbol","title":"FlagContainer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlagContainer"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"FlagContainer"},{"type":"text","text":" is a type that encapsulates your "},{"type":"codeVoice","code":"Flag"},{"type":"text","text":" and "},{"type":"codeVoice","code":"FlagGroup"},{"type":"text","text":" "},{"type":"text","text":"types. The only requirement of a "},{"type":"codeVoice","code":"FlagContainer"},{"type":"text","text":" is that it can be initialised"},{"type":"text","text":" "},{"type":"text","text":"with an empty "},{"type":"codeVoice","code":"init()"},{"type":"text","text":"."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagContainer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FlagContainer"}],"url":"\/documentation\/vexil\/flagcontainer"},"doc://Vexil/documentation/Vexil/FlagGroup":{"role":"symbol","title":"FlagGroup","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlagGroup"}],"abstract":[{"type":"text","text":"A wrapper representing a group of Feature Flags \/ Feature Toggles."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagGroup","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FlagGroup"}],"url":"\/documentation\/vexil\/flaggroup"},"doc://Vexil/documentation/Vexil/FlagPublishing":{"role":"article","title":"Flag Publishing","abstract":[{"type":"text","text":"Vexil supports real-time updates when flag values change through the use of Combine."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagPublishing","kind":"article","type":"topic","url":"\/documentation\/vexil\/flagpublishing"},"doc://Vexil/documentation/Vexil/VexilConfiguration":{"role":"symbol","title":"VexilConfiguration","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"VexilConfiguration"}],"abstract":[{"type":"text","text":"A configuration struct passed into the "},{"type":"codeVoice","code":"FlagPole"},{"type":"text","text":" to configure it."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/VexilConfiguration","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VexilConfiguration"}],"url":"\/documentation\/vexil\/vexilconfiguration"},"doc://Vexil/documentation/Vexil/Flag/key":{"role":"symbol","title":"key","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"abstract":[{"type":"text","text":"The string-based Key for this "},{"type":"codeVoice","code":"Flag"},{"type":"text","text":", as calculated during "},{"type":"codeVoice","code":"init"},{"type":"text","text":". This key is"},{"type":"text","text":" "},{"type":"text","text":"sent to  the "},{"type":"codeVoice","code":"FlagValueSource"},{"type":"text","text":"s."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Flag\/key","kind":"symbol","type":"topic","url":"\/documentation\/vexil\/flag\/key"},"doc://Vexil/documentation/Vexil/FlagGroup/CodingKeyStrategy":{"conformance":{"constraints":[{"type":"codeVoice","code":"Group"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"FlagContainer"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"FlagGroup.CodingKeyStrategy","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeyStrategy"}],"abstract":[{"type":"text","text":"An enumeration describing how the key should be calculated for this specific "},{"type":"codeVoice","code":"FlagGroup"},{"type":"text","text":"."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagGroup\/CodingKeyStrategy","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CodingKeyStrategy"}],"url":"\/documentation\/vexil\/flaggroup\/codingkeystrategy"},"doc://Vexil/documentation/Vexil/FlagPole":{"role":"symbol","title":"FlagPole","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlagPole"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"FlagPole"},{"type":"text","text":" hoists a group of feature flags \/ feature toggles."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagPole","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FlagPole"}],"url":"\/documentation\/vexil\/flagpole"},"doc://Vexil/documentation/Vexil":{"role":"collection","title":"Vexil","abstract":[{"type":"text","text":"Vexil (named for Vexillology) is a Swift package for managing feature flags (also called feature toggles) in a flexible, multi-provider way."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil","kind":"symbol","type":"topic","url":"\/documentation\/vexil"},"doc://Vexil/documentation/Vexil/FlagValueSource":{"role":"symbol","title":"FlagValueSource","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlagValueSource"}],"abstract":[{"type":"text","text":"A simple protocol that describes a source of "},{"type":"codeVoice","code":"FlagValue"},{"type":"text","text":"s"}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValueSource","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FlagValueSource"}],"url":"\/documentation\/vexil\/flagvaluesource"},"doc://Vexil/documentation/Vexil/Flag":{"role":"symbol","title":"Flag","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Flag"}],"abstract":[{"type":"text","text":"A wrapper representing a Feature Flag \/ Feature Toggle."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Flag","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Flag"}],"url":"\/documentation\/vexil\/flag"}}}