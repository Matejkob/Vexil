{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Vexil, the definition of flags follows a similar pattern to "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-argument-parser"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Vexil supports a tree of flags, so we need a structure to hold them:"}]},{"type":"codeListing","syntax":"swift","code":["import Vexil","","struct LoginFlags: FlagContainer {","","    @Flag(\"Enables the forgot password button on the login screen and associated flows\")","    var forgotPassword: Bool","","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Side Note:"}]},{"type":"text","text":" Vexil requires descriptions for all of its flags and flag groups. This is used by Vexillographer for providing context for the flags you are enabling\/disabling in the UI, but it also provides context for future developers (especially yourself in 12 months time) as to what flags mean and what their intended use is."}]},{"anchor":"Flag-Groups","level":2,"type":"heading","text":"Flag Groups"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also create nested flag groups. These can live in separate files or anywhere in your code that is suitable. This allows you to structure your flags in the way that makes the most sense to you."}]},{"type":"codeListing","syntax":"swift","code":["import Vexil","","struct PasswordFlags: FlagContainer {","","    @Flag(\"Enables or disables the change password button on the profile screen and associated flows\")","    var changePassword: Bool","    ","}","","struct ProfileFlags: FlagContainer {","","    @FlagGroup(\"Flags related to passwords in the profile screen\")","    var password: PasswordFlags","","}","","struct AppFlags: FlagContainer {","","    @FlagGroup(\"Flags that affect the login screen\")","    var login: LoginFlags","    ","    @FlagGroup(\"Flags related to the profile screen\")","    var profile: ProfileFlags","    ","}"]},{"anchor":"Flag-types","level":2,"type":"heading","text":"Flag types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"So far weâ€™ve only looked at basic boolean flags, but Vexil supports flags of any basic type, and almost any type that can be made "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Important:"}]},{"type":"text","text":" All "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValueSource"},{"type":"text","text":"s that are included as part of Vexil support all types mentioned here, but some third-party providers might not support all flag types, be sure to check their documentation."}]},{"anchor":"Standard-Types","level":3,"type":"heading","text":"Standard Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can specify your flag as an integer, double or string. Note that you need to provide a default value for your non-boolean flags."}]},{"type":"codeListing","syntax":"swift","code":["import Vexil","","struct NormalFlags: FlagContainer {","","    @Flag(default: 10, \"This is a demonstration Int flag\")","    var myIntFlag: Int","","    @Flag(default: 0.5, \"This is a demonstration Double flag\")","    var myDoubleFlag: Double","","    @Flag(default: \"Placeholder\", \"This is a demonstration String flag\")","    var myStringFlag: String","","}"]},{"anchor":"Enum-Types","level":3,"type":"heading","text":"Enum Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can make any enum into a flag by conforming to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValue"},{"type":"text","text":", so you can specify from a list of options in your flag backend or UI. Your enum needs to be backed by a standard type (string, integer, double, etc) and\/or implement "},{"type":"codeVoice","code":"RawRepresentable"},{"type":"text","text":" with a standard type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want your enum options to appear selectable in Vexillographer you also need to conform to "},{"type":"codeVoice","code":"CaseIterable"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["import Vexil","","enum MyTheme: String, FlagValue, CaseIterable {","    case blue","    case green","    case red","}","","struct ThemeFlags {","","    @Flag(default: .blue, \"The theme to use for the app\")","    var currentTheme: MyTheme","    ","}"]},{"anchor":"Codable-Types","level":3,"type":"heading","text":"Codable Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Vexil provides default implementations for "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types, so all you need to do declare that your type conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValue"},{"type":"text","text":" as well."}]},{"type":"codeListing","syntax":"swift","code":["struct MyStruct: FlagValue, Codable {","    let property1: String","    let property2: Int","    let property3: String","}","","struct TestFlags: FlagContainer {","","    @Flag(defaultValue: MyStruct(property1: \"abc123\", property2: 123, property3: \"ðŸ¤¯\"), description: \"...\")","    var testFlag: MyStruct","    ","}"]},{"anchor":"All-Supported-Flag-Values","level":3,"type":"heading","text":"All Supported Flag Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following existing types are supported out of the box:"}]},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Notes"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Bool"}]}],[{"type":"paragraph","inlineContent":[]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}],[{"type":"paragraph","inlineContent":[]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"URL"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Boxed into a string"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Date"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Boxed into an ISO8601 date string"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Data"}]}],[{"type":"paragraph","inlineContent":[]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Float"}]}],[{"type":"paragraph","inlineContent":[]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Double"}]}],[{"type":"paragraph","inlineContent":[]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Int"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Int8"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int16"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int32"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int64"},{"type":"text","text":", and their "},{"type":"codeVoice","code":"UInt"},{"type":"text","text":" equivalents are all supported and boxed into an "},{"type":"codeVoice","code":"Int"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"RawRepresentable"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"RawValue"},{"type":"text","text":" is also a supported "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValue"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Optional"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" is also a supported "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValue"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Array"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" is also a supported "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValue"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Dictionary"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"With "},{"type":"codeVoice","code":"String"},{"type":"text","text":" keys and when "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is also a supported "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValue"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Codable"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Default implementation is provided if you declare that your "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types also conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValue"}]}]]],"header":"row"},{"anchor":"Supporting-Custom-Types","level":2,"type":"heading","text":"Supporting Custom Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In fact, any type can be used as a flag as long as it conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValue"},{"type":"text","text":". You just need to be to box\/unbox it from a simple type that the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValueSource"},{"type":"text","text":"s support."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But be warned here, the boxing and unboxing of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValue"},{"type":"text","text":"s is designed around what "},{"type":"codeVoice","code":"UserDefaults"},{"type":"text","text":" supports, and not all ``FlagValueSource"},{"type":"codeVoice","code":" "},{"type":"text","text":" backends support all boxed types."}]},{"type":"codeListing","syntax":"swift","code":["extension MyCustomType: FlagValue {","\t public typealias BoxedValueType = String","","    public init? (boxedFlagValue: BoxedFlagValue) {","        guard case .string(let value) = boxedFlagValue else { return nil }","        ","        \/\/ decode your type here","        let decoded = ...","        self = decoded","    }","","    public var boxedFlagValue: BoxedFlagValue {","","\t\t \/\/ encode your type here","        let encoded = ...","        return .string(encoded)","    }","}"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/vexil\/definingflags"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Vexil\/documentation\/Vexil\/DefiningFlags","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Defining Flags is the cornerstone of Vexil. Learn how to structure your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagContainer"},{"type":"text","text":", use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagGroup"},{"type":"text","text":"s and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Flag"},{"type":"text","text":"s of various types."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Defining Flags","role":"article","modules":[{"name":"Vexil"}]},"hierarchy":{"paths":[["doc:\/\/Vexil\/documentation\/Vexil"]]},"seeAlsoSections":[{"title":"Flags","identifiers":["doc:\/\/Vexil\/documentation\/Vexil\/Flag","doc:\/\/Vexil\/documentation\/Vexil\/FlagValue"],"generated":true}],"references":{"doc://Vexil/documentation/Vexil/FlagContainer":{"role":"symbol","title":"FlagContainer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlagContainer"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"FlagContainer"},{"type":"text","text":" is a type that encapsulates your "},{"type":"codeVoice","code":"Flag"},{"type":"text","text":" and "},{"type":"codeVoice","code":"FlagGroup"},{"type":"text","text":" "},{"type":"text","text":"types. The only requirement of a "},{"type":"codeVoice","code":"FlagContainer"},{"type":"text","text":" is that it can be initialised"},{"type":"text","text":" "},{"type":"text","text":"with an empty "},{"type":"codeVoice","code":"init()"},{"type":"text","text":"."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagContainer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FlagContainer"}],"url":"\/documentation\/vexil\/flagcontainer"},"doc://Vexil/documentation/Vexil":{"role":"collection","title":"Vexil","abstract":[{"type":"text","text":"Vexil (named for Vexillology) is a Swift package for managing feature flags (also called feature toggles) in a flexible, multi-provider way."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil","kind":"symbol","type":"topic","url":"\/documentation\/vexil"},"doc://Vexil/documentation/Vexil/FlagValue":{"role":"symbol","title":"FlagValue","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlagValue"}],"abstract":[{"type":"text","text":"A type that represents the wrapped value of a "},{"type":"codeVoice","code":"Flag"}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValue","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FlagValue"}],"url":"\/documentation\/vexil\/flagvalue"},"https://github.com/apple/swift-argument-parser":{"title":"Swift Argument Parser","titleInlineContent":[{"type":"text","text":"Swift Argument Parser"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-argument-parser","url":"https:\/\/github.com\/apple\/swift-argument-parser"},"doc://Vexil/documentation/Vexil/FlagValueSource":{"role":"symbol","title":"FlagValueSource","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlagValueSource"}],"abstract":[{"type":"text","text":"A simple protocol that describes a source of "},{"type":"codeVoice","code":"FlagValue"},{"type":"text","text":"s"}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagValueSource","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FlagValueSource"}],"url":"\/documentation\/vexil\/flagvaluesource"},"doc://Vexil/documentation/Vexil/Flag":{"role":"symbol","title":"Flag","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Flag"}],"abstract":[{"type":"text","text":"A wrapper representing a Feature Flag \/ Feature Toggle."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/Flag","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Flag"}],"url":"\/documentation\/vexil\/flag"},"doc://Vexil/documentation/Vexil/FlagGroup":{"role":"symbol","title":"FlagGroup","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlagGroup"}],"abstract":[{"type":"text","text":"A wrapper representing a group of Feature Flags \/ Feature Toggles."}],"identifier":"doc:\/\/Vexil\/documentation\/Vexil\/FlagGroup","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FlagGroup"}],"url":"\/documentation\/vexil\/flaggroup"}}}